.. include:: links.inc

.. _introduction_installation:

Installation
============

.. contents:: Table of Contents
   :local:
   :backlinks: top

Supported Platforms
-------------------

*SfePy* is known to work on various flavors of recent Linux, Intel-based MacOS
 and Windows. It can work with both Python 2.7 and Python 3.x.

Note: Depending on Python installation and OS used, replacing ``python`` by
``python3`` might be required in all the commands below
(e.g. in :ref:`compilation`) in order to use Python 3.


Requirements
------------

Installation prerequisites, required to build *SfePy*:

- a C compiler suite,
- `Python`_ 2.7 or 3.x,
- `NumPy`_,
- `Cython`_.

Python packages required for using *SfePy*:

- `Pyparsing`_,
- `SciPy`_,
- `scikit-umfpack`_, for enabling UMFPACK solver for SciPy >= 0.14.0,
- `Matplotlib`_, for various plots; GTKAgg for live plotting via log.py,
- `PyTables`_, for storing results in HDF5 files,
- `SymPy`_, for some tests and functions,
- `Mayavi`_, for postproc.py,
- `Pysparse`_, for schroedinger.py,
- `igakit`_, for ``script/gen_iga_patch.py`` - simple IGA domain generator,
- `petsc4py`_ and `mpi4py`_, for running parallel examples and using parallel
  solvers from PETSc,
- `pymetis`_, for mesh partitioning using Metis,
- `wxPython`_, for `IPython`_ integration.

Make sure the dependencies of those packages are also installed (e.g `igakit`_
reguires FORTRAN compiler, `scikit-umfpack`_ does not work without UMFPACK,
`petsc4py`_ without PETSc etc.).

*SfePy* should work both with bleeding edge (Git) and last released versions of
`NumPy` and `SciPy`. Please, submit an issue at `Issues`_ page in case this
does not hold.

Other dependencies/suggestions:

- To be able to (re)generate the documentation: `Sphinx`_, `numpydoc`_ and
  LaTeX (see :ref:`how_to_regenerate_documentation`).
- If `doxygen` is installed, the documentation of data structures and functions
  can be automatically generated by running::

   python setup.py doxygendocs

- Mesh generation tools use `pexpect` and `gmsh` or `tetgen`.
- `IPython`_ is recommended over the regular Python shell to fluently follow
  some parts of primer/tutorial.


.. _Python_distribution

Notes on selecting Python distribution:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*SfePy* should work with any recent Python 2.7 or 3.x (in long-term view
Python 3 is recommended). It's only matter of taste to use either native OS
Python installation or any other suitable distribution. We could recommend
the following:

- Linux: use OS native installation (consult the package manager of your
  favorite distribution, see `Notes on Installing SfePy Dependencies on
  Various Platforms`_.).

- macOS: use multi-platform scientific Python distributions `Anaconda`_ (See
  `Notes on Multi-platform Python Distributions`_ for further details.)

- Windows: use free versions of commercial multi-platform
  scientific Python distributions `Anaconda`_ or
  `Enthought Canopy`_ (see `Notes on Multi-platform Python Distributions`_ for
  further details). In addition a completely free open-source portable
  distribution `WinPython`_ can be used.

On any supported platform we could recommend `Anaconda`_ distribution as
easy-to-use, stable and up-to-date Python distribution with all
required dependencies (including pre-build `sfepy` package).

.. _install_sfepy:

Installing SfePy
----------------

There are several pre-build `sfepy` packages you may directly install (no
further configuration is needed):

- `Anaconda`_ distribution: install `sfepy` from `conda-forge`_ channel::

   conda install -c conda-forge sfepy

- Debian/(K)Ubuntu: install `python-sfepy`::

   sudo aptitude install python-sfepy

.. _install_from_sources:

Installing SfePy from Sources
-----------------------------

The latest release can be obtained from the `download`_ page. Otherwise,
download the latest development version of the code from `SfePy git
repository`_::

    git clone git://github.com/sfepy/sfepy.git

In case you wish to use a specific release instead of the latest master
version, use::

    git tag -l

to see the available releases - the release tags have form
``release_<year>.<int>``.

See the `download`_ page for additional download options.

.. _compilation:

Compilation of C Extension Modules
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In the *SfePy* top-level directory:

1. Look at ``site_cfg_template.py`` and follow the instructions
   therein. Usually no changes are necessary.

2. Compile the extension modules

   a) for in-place use::

        python setup.py build_ext --inplace

   b) for installation::

        python setup.py build

We recommend starting with the in-place build.

Installation
^^^^^^^^^^^^

*SfePy* can be used without any installation by running its main scripts
 and examples from the top-level directory of the distribution, or can be
 installed locally or system-wide.

- System-wide (may require root privileges)::

    python setup.py install

- Local (requires write access to ``<installation prefix>``)::

    python setup.py install --root=<installation prefix>

If all went well, proceed with `Testing`_.

.. _testing:

Testing
-------

After building in-place or installing *SfePy* you can check if all the
functions are working by running the automated tests.

In-place Build
^^^^^^^^^^^^^^

In the source directory type::

    python sfepy-run run_tests

If a particular test fails, please run it in the raise mode::

    python sfepy-run run_tests --raise tests/failing_test_name.py

and report the output to the `SfePy mailing list`_. It is also possible to
automatically start a debugger when/if an exception is raised by running a
test in the debug mode::

    python sfepy-run run_tests --debug tests/failing_test_name.py

On a Unix-based systems (Linux, MacOS), the script can be executed directly
by::

    ./sfepy-run run_tests

Installed Build
^^^^^^^^^^^^^^^

In a directory different from the source directory, run::

    sfepy-run run_tests

or (on Unix-based systems)::

    sfepy-run run_tests

Note that this command creates a directory called ``'output'`` in the current
directory as well as some other auxiliary files. Use the in-place build testing
if you do not want to care about this.

Debugging
---------

If something goes wrong, set ``debug_flags = '-DDEBUG_FMF'`` in ``site_cfg.py``
to turn on bound checks in the low level C functions, and recompile the code::

    python setup.py clean
    python setup.py build_ext --inplace

Then re-run your code and report the output.

.. _using-ipython:

Using IPython
-------------

It is preferable to use (a customized) `IPython`_ over the regular Python shell
when following :doc:`tutorial` or :doc:`primer`. Install `IPython`_ and then
customize it as follows:

1. Create a new profile::

     ipython profile create sfepy

2. Open the ``~/.ipython/profile_sfepy/ipython_config.py`` file in a text
   editor and add/edit after the ``c = get_config()`` line the following:

   .. sourcecode:: python

      exec_lines = [
          'from sfepy.base.base import *',
          'from sfepy.discrete import *',
          'from sfepy.discrete.fem import *',
          'from sfepy.applications import solve_pde',
          'import matplotlib as mpl',
          'mpl.use("WXAgg")',
          'from matplotlib.pyplot import *',
          'from sfepy.postprocess.viewer import Viewer',
      ]

      c.InteractiveShellApp.exec_lines = exec_lines

      c.TerminalIPythonApp.gui = 'wx'

      c.TerminalInteractiveShell.colors = 'Linux' # NoColor, Linux, or LightBG

3. Run the customized IPython shell::

     ipython --profile=sfepy

.. _multi_platform_distributions_notes:


Notes on Multi-platform Python Distributions
--------------------------------------------

Anaconda
^^^^^^^^

(We highly recommend this scientific Python distribution. Currently tested
 with Python 2.7/3.6 64-Bit on Ubuntu 14.04 LTS, Windows 8.1 and MacOS 10.10+.)

Download appropriate `Anaconda`_ Python 2.7 or 3.x installer package and follow
install instructions. We recommend to choose *user-level* install option (no
admin privileges required).

Anaconda can be used for:

#. installing the latest release of *SfePy*  directly from the `conda-forge`_
   channel, see `sfepy-feedstock`_. In this case, simply do::

     conda install -c conda-forge sfepy

   Installing *SfePy*  from the conda-forge channel can also be achieved by
   adding `conda-forge`_ to your channels with::

     conda config --add channels conda-forge

   Once the `conda-forge`_ channel has been enabled, *SfePy* can be installed
   with::

     conda install sfepy

   It is possible to list all of the versions of *SfePy*  available on your
   platform with::

     conda search sfepy --channel conda-forge

#. installing the sfepy dependencies only - then proceed with the
   :ref:`_install_from_sources` instructions.

   In this case, install the missing/required packages using built-in `conda`
   package manager::

     conda install mayavi wxpython

   See `conda help` for further information.

Occasionally, you should check for distribution and/or installed packages
updates (there is no built-in automatic update mechanism available)::

  conda update conda
  conda update anaconda
  conda update <package>

Compilation of C Extension Modules
""""""""""""""""""""""""""""""""""

To build *SfePy* extension modules, included `mingw-w32/64`_ compiler tools
should work fine. If you encounter any problems, we recommend to use
Microsoft `Visual C++ Build Tools`_ instead (see `Anaconda FAQ`_).


Notes on Installing SfePy Dependencies on Various Platforms
-----------------------------------------------------------

The following information has been provided by users of the listed platforms
and may become obsolete over time. The generic installation instructions above
should work in any case, provided the required dependencies are installed.

Gentoo
^^^^^^

::

    emerge -va pytables pyparsing numpy scipy matplotlib ipython mayavi

Archlinux
^^^^^^^^^

::

    pacman -S python2-numpy python2-scipy python2-matplotlib ipython2 python2-sympy
    yaourt -S python-pytables python2-mayavi

Instructions
""""""""""""

Edit Makefile and change all references from python to python2.
Edit scripts and change shebangs to point to python2.

Debian
^^^^^^

(Old instructions, check also `(K)Ubuntu`_ below.)

First, you have to install the dependencies packages (if `aptitude` is not
installed, install it or try `apt-get install` instead)::

    aptitude install python-tables python-pyparsing python-matplotlib python-scipy

Than *SfePy* can be installed with::

   aptitude install python-sfepy

(K)Ubuntu
^^^^^^^^^

(Tested on Ubuntu 14.04 LTS, 14.10 abd Kubuntu 14.10.)

First, you have to install the dependencies packages (if `aptitude` is not
installed, install it or try `apt-get install` instead)::

    sudo aptitude install python-scipy python-matplotlib python-tables python-pyparsing libsuitesparse-dev python-setuptools mayavi2 python-dev ipython python-sympy cython python-sparse

Than *SfePy* can be installed with::

   aptitude install python-sfepy

